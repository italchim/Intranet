steps:
  # Step 1: Access the Gemini API Key from Secret Manager
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'get-api-key'
    entrypoint: 'bash'
    args:
      - '-c'
      - 'gcloud secrets versions access latest --secret=gemini-api-key > /workspace/api_key.txt'

  # Step 2: Replace the placeholder in the TypeScript file with the actual API key
  # This uses sed to find and replace the placeholder %%GEMINI_API_KEY%%
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'inject-api-key'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Use a different delimiter for sed to avoid issues with special characters in the key
        sed -i "s|%%GEMINI_API_KEY%%|$(cat /workspace/api_key.txt)|g" services/geminiService.ts

  # Step 3: Deploy the application files to the Cloud Storage bucket
  # The -d flag deletes files in the bucket that are not present in the source
  # The -r flag makes the sync recursive
  - name: 'gcr.io/cloud-builders/gsutil'
    id: 'deploy-to-bucket'
    args: ['-m', 'rsync', '-d', '-r', '.', 'gs://italchimici_intranetportal']

  # Step 4: Configure the bucket to serve a static website
  # Sets index.html as the main page and a fallback error page.
  - name: 'gcr.io/cloud-builders/gsutil'
    id: 'configure-website'
    args: ['web', 'set', '-m', 'index.html', '-e', 'index.html', 'gs://italchimici_intranetportal']

  # Step 5: Make the bucket contents publicly readable
  # This is necessary for a public static website. For a real intranet,
  # consider using Identity-Aware Proxy (IAP) for access control.
  - name: 'gcr.io/cloud-builders/gsutil'
    id: 'set-public-access'
    args: ['iam', 'ch', 'allUsers:objectViewer', 'gs://italchimici_intranetportal']

options:
  # Set the logging mode for the build
  logging: CLOUD_LOGGING_ONLY
